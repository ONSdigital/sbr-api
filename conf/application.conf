## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This must be changed for production, but we don't recommend you change it in this file.
play.http.secret.key = "changeme"
play.http.secret.key = ${?APPLICATION_SECRET}

## Modules
# https://www.playframework.com/documentation/latest/Modules
# ~~~~~
# Control which modules are loaded when Play starts.  Note that modules are
# the replacement for "GlobalSettings", which are deprecated in 2.5.x.
# Please see https://www.playframework.com/documentation/latest/GlobalSettings
# for more information.
#
# You can also extend Play functionality by using one of the publically available
# Play modules: https://playframework.com/documentation/latest/ModuleDirectory
play.modules {
  # By default, Play will load any class called Module that is defined
  # in the root package (the "app" directory), or you can define them
  # explicitly below.
  # If there are any built-in modules that you want to enable, you can list them here.
  enabled += "play.modules.swagger.SwaggerModule"
  enabled += "TracingModule"

  # If there are any built-in modules that you want to disable, you can list them here.
  #disabled += ""
}

## Internationalisation
# https://www.playframework.com/documentation/latest/JavaI18N
# https://www.playframework.com/documentation/latest/ScalaI18N
# ~~~~~
# Play comes with its own i18n settings, which allow the user's preferred language
# to map through to internal messages, or allow the language to be stored in a cookie.
play.i18n {
  # The application languages
  langs = [ "en" ]

  # Whether the language cookie should be secure or not
  #langCookieSecure = true

  # Whether the HTTP only attribute of the cookie should be set to true
  #langCookieHttpOnly = true
}

## Play HTTP settings
# ~~~~~
play.http {
  ## Filters
  # https://www.playframework.com/documentation/latest/ScalaHttpFilters
  # https://www.playframework.com/documentation/latest/JavaHttpFilters
  # ~~~~~
  # Filters run code on every request. They can be used to perform
  # common logic for all your actions, e.g. adding common headers.
  # Defaults to "Filters" in the root package (aka "apps" folder)
  # Alternatively you can explicitly register a class here.
  filters = filters.Filters
}

## WS (HTTP Client)
# https://www.playframework.com/documentation/latest/ScalaWS#Configuring-WS
# ~~~~~
# The HTTP client primarily used for REST APIs.  The default client can be
# configured directly, but you can also create different client instances
# with customized settings. You must enable this by adding to build.sbt:
#
# libraryDependencies += ws // or javaWs if using java
#
play.ws {
  timeout.request = "15000ms"
}

## Filters
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# There are a number of built-in filters that can be enabled and configured
# to give Play greater security.  You must enable this by adding to build.sbt:
#
# libraryDependencies += filters
#
play.filters {
  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    allowAll = false
    allowAll = ${?SBR_API_CORS_ALLOW_ALL}

    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    #allowedOrigins = ["http://www.example.com"]

    # The allowed HTTP methods. If null, all methods are allowed
    #allowedHttpMethods = ["GET", "POST"]
  }

  ## CSRF Filter
  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
  # ~~~~~
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF token. This token gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    # Sets the cookie to be sent only over HTTPS
    #cookie.secure = true

    # Defaults to CSRFErrorHandler in the root package.
    #errorHandler = MyCSRFErrorHandler
  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    # The X-Frame-Options header. If null, the header is not set.
    #frameOptions = "DENY"

    # The X-XSS-Protection header. If null, the header is not set.
    #xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    #contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    #permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    #contentSecurityPolicy = "default-src 'self'"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    #allowed = [".example.com", "localhost:9000"]
  }
}

// Zipkin tracing
trace {
  zipkin {
    reporter {
      protocol = "http"
      protocol = ${?SBR_TRACING_REPORTER_PROTOCOL}
      host = "localhost"
      host = ${?SBR_TRACING_REPORTER_HOST}
      port = 9411
      port = ${?SBR_TRACING_REPORTER_PORT}
    }

    sample-rate = 1.0
    sample-rate = ${?SBR_TRACING_SAMPLE_RATE}
  }
}

zipkin-trace-context {
  fork-join-executor {
    parallelism-factor = 20.0
    parallelism-max = 200
  }
}

api.version = "alpha"
swagger.filter = "filters.SwaggerConfigurationFilter"
swagger.api.info = {
  title = "Statistical Business Register API",
  description = "SBR Api",
  contact = "SBR Support Team",
  termsOfService = "https://www.ons.gov.uk/help/termsandconditions",
  licence = "MIT",
  licenceUrl = "https://github.com/ONSdigital/sbr-api/blob/master/LICENSE"
}


minimum.key.length = 4
minimum.key.length = ${?SBR_MIN_KEY_LENGTH}

request.timeout = 15000
request.timeout = ${?SBR_EXTERNAL_REQUEST_TIMEOUT}

api {
  business.index{
    data {
      url = "http://localhost:9005/v1"
      url = ${?ONS_BI_URL_ENDPOINT}
    }
  }

  sbr {
    control {
      # url is being deprecated - use protocol / host / port instead
      url = "http://localhost:9001/v1"
      url = ${?ONS_SBR_CONTROL_API_URL}

      protocol = "http"
      protocol = ${?ONS_SBR_CONTROL_API_PROTOCOL}
      host = "localhost"
      host = ${?ONS_SBR_CONTROL_API_HOST}
      port = 9001
      port = ${?ONS_SBR_CONTROL_API_PORT}
    }

    admin.data {
      paye.url = "http://localhost:9005/v1"
      paye.url = ${?ONS_SBR_PAYE_ADMIN_DATA_API_URL}
      ch.url = "http://localhost:9005/v1"
      ch.url = ${?ONS_SBR_CH_ADMIN_DATA_API_URL}

      # deprecated - use api.admin.data.vat instead
      vat.url = "http://localhost:9005/v1"
      vat.url = ${?ONS_SBR_VAT_ADMIN_DATA_API_URL}
    }
  }

  admin {
    data {
      vat {
        protocol = "http"
        protocol = ${?ONS_SBR_VAT_ADMIN_DATA_API_PROTOCOL}
        host = "localhost"
        host = ${?ONS_SBR_VAT_ADMIN_DATA_API_HOST}
        port = 9005
        port = ${?ONS_SBR_VAT_ADMIN_DATA_API_PORT}
      }

      paye {
        protocol = "http"
        protocol = ${?ONS_SBR_PAYE_ADMIN_DATA_API_PROTOCOL}
        host = "localhost"
        host = ${?ONS_SBR_PAYE_ADMIN_DATA_API_HOST}
        port = 9005
        port = ${?ONS_SBR_PAYE_ADMIN_DATA_API_PORT}
      }

      ch {
        protocol = "http"
        protocol = ${?ONS_SBR_CH_ADMIN_DATA_API_PROTOCOL}
        host = "localhost"
        host = ${?ONS_SBR_CH_ADMIN_DATA_API_HOST}
        port = 9005
        port = ${?ONS_SBR_CH_ADMIN_DATA_API_PORT}
      }
    }
  }
}

artifactory {
  publish.init = false
  publish.init = ${?BI_PUBLISH_ARTIFACTORY_INIT_TRIGGER}
  publish.repository = "https://Unused/transient/repository"
  publish.repository = ${?BI_PUBLISH_ARTIFACTORY_NAME}
  host = "Unknown Artifactory host"
  host = ${?BI_PUBLISH_ARTIFACTORY_HOST_NAME}
  user = "Unknown username"
  user = ${?BI_PUBLISH_ARTIFACTORY_USER_NAME}
  password = "Unknown password"
  password = ${?BI_PUBLISH_ARTIFACTORY_PASSWORD}
}